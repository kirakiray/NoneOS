!function(){"use strict";class t{#t;#e;constructor(t){this.#t=t.parent,this.#e=t.root}get parent(){return this.#t}get root(){return this.#e||this}get path(){return this.parent?`${this.parent.path}/${this.name}`:this.name}async size(){if("file"===this.kind){return(await this.file()).size}return null}async copyTo(t,e){const[a,r]=await s(t,e,"copy",this);if("file"===this.kind){const t=await a.get(r,{create:"file"});return await t.write(await this.file()),t}const n=await a.get(r,{create:"dir"});for await(const[t,e]of this.entries())await e.copyTo(n,t);return n}async moveTo(t,e){const[a,r]=await s(t,e,"move",this);if("file"===this.kind){const t=await a.get(r,{create:"file"});return await t.write(await this.file()),await this.remove(),t}const n=await a.get(r,{create:"dir"});for await(const[t,e]of this.entries())await e.moveTo(n,t);return await this.remove(),n}toJSON(){return{name:this.name,path:this.path,kind:this.kind}}observe(t){const e={func:t,handle:this};return a.add(e),()=>{a.delete(e)}}}const e=new BroadcastChannel("nonefs-system-handle-change");e.onmessage=t=>{r({...t.data},!0)};const a=new Set,r=({path:t,...r},s)=>{s||e.postMessage({path:t,...r}),a.forEach((e=>{t.includes(e.handle.path)&&e.func({path:t,...r})}))},s=async(t,e,a,r)=>{let s=t,n=e;if("string"==typeof t&&(n=t,s=r.parent),await r.isSame(s))return r;const i=s.path,o=r.path;if(i.startsWith(o+"/"))throw new Error(`Cannot ${a} a directory into its subdirectory`);return n=n||r.name,[s,n]},n=(()=>{const t=navigator.userAgent.toLowerCase();return t.includes("safari")&&!t.includes("chrome")})();class i extends t{#a=null;constructor(t,e={}){super(e),this.#a=t}get _handle(){return this.#a}get name(){return this.#a.name}async id(){const t=this.#a;return t.getUniqueId?await t.getUniqueId():await(async t=>{if(globalThis.crypto){"string"==typeof t?t=(new TextEncoder).encode(t):t instanceof Blob&&(t=await t.arrayBuffer());const e=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(e)).map((t=>t.toString(16).padStart(2,"0"))).join("")}{const e=await import("crypto");"string"==typeof t?t=(new TextEncoder).encode(t):t instanceof Blob&&(t=await t.arrayBuffer());const a=e.createHash("sha256");return a.update(Buffer.from(t)),a.digest("hex")}})(this.path)}async isSame(t){return this.#a.isSameEntry(t._handle)}async remove(){const t=this.parent;await t.#a.removeEntry(this.#a.name,{recursive:!0}),r({type:"remove",path:this.path})}}class o{async file(t){return this.read({...t,type:"file"})}async text(t){return this.read({...t,type:"text"})}async buffer(t){return this.read({...t,type:"buffer"})}async base64(t){const e=await this.file(t);return new Promise(((t,a)=>{const r=new FileReader;r.onload=()=>{t(r.result)},r.onerror=t=>{a(t)},r.readAsDataURL(e)}))}async lastModified(){return(await this.file()).lastModified}get kind(){return"file"}}class c extends i{constructor(...t){super(...t)}async read(t={}){let e=await this._handle.getFile();switch((t.start||t.end)&&(e=e.slice(t.start,t.end)),t.type){case"file":return e;case"buffer":return e.arrayBuffer();default:return e.text()}}async write(t,e={}){if(n)return new Promise((async(e,a)=>{const r=new Worker("/packages/fs/handle/write-worker.js");r.postMessage({path:this.path,content:t instanceof Blob?await t.arrayBuffer():t}),r.onmessage=async t=>{const{success:s,error:n}=t.data;await new Promise((t=>setTimeout(t,100))),s?(console.log("文件写入成功！"),e(!0)):a(n),r.terminate()}}));const a=this._handle,s=await a.createWritable();await s.write(t),await s.close(),r({path:this.path,type:"write",data:t,remark:e.remark})}}(async t=>{const e=Object.getOwnPropertyDescriptors(o.prototype);delete e.constructor,Object.defineProperties(t.prototype,e)})(c);class l{async _getByMultiPath(t,e){const{create:a}=e||{},r=t.split("/");let s=this;for(;r.length;){const t=r.shift();let e;a&&(e=r.length?"dir":a),s=await s.get(t,{create:e})}return s}async*entries(){for await(let t of this.keys()){const e=await this.get(t);yield[t,e]}}async*values(){for await(let[t,e]of this.entries())yield e}async some(t){for await(let[e,a]of this.entries())if(await t(a,e,this))break}async forEach(t){for await(let[e,a]of this.entries())await t(a,e,this)}async flat(){const t=[];for await(const[e,a]of this.entries())if("dir"!==a.kind)t.push(a);else{const e=await a.flat();t.push(...e)}return t}get kind(){return"dir"}}class h extends i{constructor(...t){super(...t)}async get(t,e){const{create:a}=e||{};if(t.includes("/"))return await this._getByMultiPath(t,e);let r=await this._handle.getFileHandle(t).catch((()=>null));if(r||(r=await this._handle.getDirectoryHandle(t).catch((()=>null))),!a&&!r)return null;if(r){if("file"===a&&"file"!==r.kind)throw new Error(`${t} is not a file`);if("dir"===a&&"directory"!==r.kind)throw new Error(`${t} is not a directory`)}else{let a="getDirectoryHandle";"file"===e.create&&(a="getFileHandle"),r=await this._handle[a](t,{create:!0})}return"file"===r.kind?new c(r,{parent:this,root:this.root||this}):"directory"===r.kind?new h(r,{parent:this,root:this.root||this}):null}async length(){let t=0;for await(const[e,a]of this._handle.entries())t++;return t}async*keys(){for await(let t of this._handle.keys())yield t}}(async t=>{const e=Object.getOwnPropertyDescriptors(l.prototype);delete e.constructor,Object.defineProperties(t.prototype,e)})(h);const u=t=>{const{request:e}=t,{pathname:a,origin:r,searchParams:s}=new URL(e.url),n=a.split("/"),i=[n[1].replace("$",""),...n.slice(2)].join("/");t.respondWith((async()=>{try{const t=await(async(t,e)=>{const a=await navigator.storage.getDirectory(),r=t.split("/").filter(Boolean);if(0===r.length)throw new Error("路径不能为空");const s=r[0];try{const t=await a.getDirectoryHandle(s),n=new h(t);if(1===r.length)return n;const i=r.slice(1).join("/");return await n.get(i,e)}catch(t){if("NotFoundError"===t.name)throw new Error(`根目录 "${s}" 不存在，请先使用 init("${s}") 初始化`,{cause:t});throw t}})(i),e=a.split(".").pop(),r={};return r["Content-Type"]=p(e),new Response(await t.file(),{status:200,headers:r})}catch(t){return new Response(t.stack||t.toString(),{status:400})}})())},p=t=>{switch(t){case"html":case"htm":case"txt":case"md":return"text/plain; charset=utf-8";case"js":case"mjs":return"application/javascript; charset=utf-8";case"json":return"application/json; charset=utf-8";case"css":return"text/css; charset=utf-8";case"xml":return"application/xml; charset=utf-8";case"svg":return"image/svg+xml; charset=utf-8";case"csv":return"text/csv; charset=utf-8";case"ics":return"text/calendar; charset=utf-8";case"pdf":return"application/pdf; charset=utf-8";case"doc":case"docx":return"application/msword; charset=utf-8";case"xls":case"xlsx":return"application/vnd.ms-excel; charset=utf-8";case"ppt":case"pptx":return"application/vnd.ms-powerpoint; charset=utf-8";case"zip":return"application/zip; charset=utf-8";case"gz":return"application/gzip; charset=utf-8";case"tar":return"application/x-tar; charset=utf-8";case"jpg":case"jpeg":return"image/jpeg";case"png":return"image/png";case"gif":return"image/gif";case"bmp":case"bmp":return"image/bmp";case"ico":return"image/x-icon";case"webp":return"image/webp";case"mp3":return"audio/mpeg";case"wav":return"audio/wav";case"mp4":case"m4v":return"video/mp4";case"mov":return"video/quicktime";case"avi":return"video/x-msvideo";default:return"application/octet-stream"}};self.addEventListener("fetch",(t=>{const{request:e}=t,{pathname:a,origin:r,searchParams:s}=new URL(e.url);location.origin===r&&/^\/\$/.test(a)&&u(t)})),self.addEventListener("install",(()=>{self.skipWaiting(),console.log("NoneOS installation successful")})),self.addEventListener("activate",(()=>{self.clients.claim(),console.log("NoneOS server activation successful")}))}();
