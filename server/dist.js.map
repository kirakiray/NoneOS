{"version":3,"file":"dist.js","sources":["../packages/fs/util.js","../packages/crypto/crypto-ecdsa.js","../packages/crypto/crypto-verify.js","handlers/auth.js","post-handlers/get-all.js","post-handlers/find-friend.js","post-handlers/agent-data.js","post-handlers/confirm-agent.js","post-handlers/invite-code.js","utils/response.js","handlers/post.js","client.js","main.js"],"sourcesContent":["/**\n * @file util.js\n * @author yao\n * 传入一个数据，计算哈希值\n * @param {ArrayBuffer|Blob|String} data 数据\n * @return {Promise<string>} 哈希值\n */\nexport const getHash = async (data) => {\n  if (!globalThis.crypto) {\n    // Node.js 环境\n    const crypto = await import(\"crypto\");\n    if (typeof data === \"string\") {\n      data = new TextEncoder().encode(data);\n    } else if (data instanceof Blob) {\n      data = await data.arrayBuffer();\n    }\n    const hash = crypto.createHash(\"sha256\");\n    hash.update(Buffer.from(data));\n    return hash.digest(\"hex\");\n  } else {\n    // 浏览器环境\n    if (typeof data === \"string\") {\n      data = new TextEncoder().encode(data);\n    } else if (data instanceof Blob) {\n      data = await data.arrayBuffer();\n    }\n    const hash = await crypto.subtle.digest(\"SHA-256\", data);\n    const hashArray = Array.from(new Uint8Array(hash));\n    const hashHex = hashArray\n      .map((bytes) => bytes.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n    return hashHex;\n  }\n};\n/**\n * 计算文件的分块哈希值\n * @param {File|ArrayBuffer|String} file - 要计算哈希的文件对象、ArrayBuffer或字符串\n * @returns {Promise<string[]>} 返回包含所有分块哈希值的数组\n * @description 将文件分割成128KB大小的块，并计算每个块的SHA-256哈希值\n */\nexport const calculateFileChunkHashes = async (\n  file,\n  { callback, chunkSize } = {}\n) => {\n  const CHUNK_SIZE = chunkSize || 128 * 1024; // 128kb\n  // 获取文件的 ArrayBuffer\n  const getBuffer = async (file) => {\n    if (file instanceof Blob) {\n      return file.arrayBuffer();\n    }\n\n    if (file instanceof ArrayBuffer) {\n      return file;\n    }\n\n    if (typeof file === \"string\") {\n      // 如果是字符串，转换为ArrayBuffer\n      return new TextEncoder().encode(file).buffer;\n    }\n\n    // 添加对Nodejs Buffer的支持\n    if (typeof Buffer !== \"undefined\" && file instanceof Buffer) {\n      return file.buffer;\n    }\n\n    console.error(\"不支持的文件类型: \", typeof file, file);\n    throw new Error(\"不支持的文件类型: \");\n  };\n\n  // 处理文件分块并计算哈希\n  const buffer = await getBuffer(file);\n  const hashPromises = [];\n\n  // TODO: 这里应该分批发送代码块\n  for (let i = 0; i < buffer.byteLength; i += CHUNK_SIZE) {\n    const chunk = buffer.slice(i, i + CHUNK_SIZE);\n    const hash = await getHash(chunk);\n    if (callback) {\n      callback({\n        chunk,\n        chunkHash: hash,\n        chunkIndex: i,\n      });\n    }\n    hashPromises.push(hash);\n  }\n\n  return Promise.all(hashPromises);\n};\n\n/**\n * 获取文件的总体哈希值\n * @param {File} file - 要计算哈希的文件对象\n * @returns {Promise<string>} 返回文件的总体哈希值\n * @description 将文件分割成128kb大小的块，计算每个块的SHA-256哈希值，\n *             然后将所有块的哈希值拼接成字符串，最后计算这个字符串的哈希值作为文件的总体哈希值\n */\nexport const getFileHash = async (file) =>\n  getHash((await calculateFileChunkHashes(file)).join(\"\"));\n","/**\n * ECDSA 签名相关工具函数\n */\n\n/**\n * 生成 ECDSA 密钥对\n * @returns {Promise<{publicKey: string, privateKey: string}>} 包含公钥和私钥的 base64 字符串\n */\nexport async function generateKeyPair() {\n  try {\n    // 使用 Web Crypto API 生成 ECDSA 密钥对\n    const keyPair = await crypto.subtle.generateKey(\n      {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\", // 使用 P-256 曲线\n      },\n      true, // 可导出\n      [\"sign\", \"verify\"] // 用途\n    );\n\n    // 导出公钥（格式为 spki）\n    const publicKey = await crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\n\n    // 导出私钥（格式为 pkcs8）\n    const privateKey = await crypto.subtle.exportKey(\n      \"pkcs8\",\n      keyPair.privateKey\n    );\n\n    // 将密钥转换为 base64 字符串\n    const publicKeyBase64 = btoa(\n      String.fromCharCode(...new Uint8Array(publicKey))\n    );\n    const privateKeyBase64 = btoa(\n      String.fromCharCode(...new Uint8Array(privateKey))\n    );\n\n    return {\n      publicKey: publicKeyBase64,\n      privateKey: privateKeyBase64,\n    };\n  } catch (error) {\n    console.error(\"密钥对生成失败:\", error);\n    throw error;\n  }\n}\n\n/**\n * 导入私钥\n * @param {string} privateKeyBase64 - base64 编码的私钥\n * @returns {Promise<CryptoKey>} CryptoKey 对象\n */\nexport async function importPrivateKey(privateKeyBase64) {\n  try {\n    // 将 base64 转回二进制格式\n    const binaryKey = Uint8Array.from(atob(privateKeyBase64), (c) =>\n      c.charCodeAt(0)\n    );\n\n    // 导入私钥\n    const privateKey = await crypto.subtle.importKey(\n      \"pkcs8\",\n      binaryKey,\n      {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n      },\n      true,\n      [\"sign\"]\n    );\n\n    return privateKey;\n  } catch (error) {\n    console.error(\"私钥导入失败:\", error);\n    throw error;\n  }\n}\n\n/**\n * 导入公钥\n * @param {string} publicKeyBase64 - base64 编码的公钥\n * @returns {Promise<CryptoKey>} CryptoKey 对象\n */\nexport async function importPublicKey(publicKeyBase64) {\n  try {\n    // 将 base64 转回二进制格式\n    const binaryKey = Uint8Array.from(atob(publicKeyBase64), (c) =>\n      c.charCodeAt(0)\n    );\n\n    // 导入公钥\n    const publicKey = await crypto.subtle.importKey(\n      \"spki\",\n      binaryKey,\n      {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n      },\n      true,\n      [\"verify\"]\n    );\n\n    return publicKey;\n  } catch (error) {\n    console.error(\"公钥导入失败:\", error);\n    throw error;\n  }\n}\n\n/**\n * 创建签名函数\n * @param {string} privateKeyBase64 - base64 编码的私钥\n * @returns {Promise<Function>} 签名函数\n */\nexport const createSigner = async (privateKeyBase64) => {\n  try {\n    const privateKey = await importPrivateKey(privateKeyBase64);\n\n    return (message) => {\n      const encoder = new TextEncoder();\n      // 将消息转换为 Uint8Array\n      const data = encoder.encode(message);\n\n      // 使用私钥对数据进行签名\n      return crypto.subtle.sign(\n        {\n          name: \"ECDSA\",\n          hash: { name: \"SHA-256\" },\n        },\n        privateKey,\n        data\n      );\n    };\n  } catch (error) {\n    console.error(\"创建签名函数失败:\", error);\n    throw error;\n  }\n};\n\n/**\n * 创建验证函数\n * @param {string} publicKeyBase64 - base64 编码的公钥\n * @returns {Promise<Function>} 验证函数\n */\nexport const createVerifier = async (publicKeyBase64) => {\n  try {\n    const publicKey = await importPublicKey(publicKeyBase64);\n    return (message, signature) => {\n      const encoder = new TextEncoder();\n      // 将消息转换为 Uint8Array\n      const data = encoder.encode(message);\n      // 使用公钥验证签名\n      return crypto.subtle.verify(\n        {\n          name: \"ECDSA\",\n          hash: { name: \"SHA-256\" },\n        },\n        publicKey,\n        signature,\n        data\n      );\n    };\n  } catch (error) {\n    console.error(\"创建验证函数失败:\", error);\n    throw error;\n  }\n};","/**\n * 数据验证相关工具函数\n */\n\nimport { createVerifier } from \"./crypto-ecdsa.js\";\n\n/**\n * 验证数据签名\n * @param {Object} params - 验证参数\n * @param {Object} params.data - 包含公钥和数据的对象\n * @param {string} params.signature - base64 编码的签名\n * @returns {Promise<boolean>} 验证结果\n */\nexport const verifyData = async ({ data, signature }) => {\n  const { publicKey } = data;\n\n  // 生成验证器\n  const verify = await createVerifier(publicKey);\n\n  try {\n    // 将 base64 转换回原始格式并验证签名\n    const signatureBuffer = new Uint8Array(\n      [...atob(signature)].map((c) => c.charCodeAt(0))\n    ).buffer;\n\n    const result = await verify(JSON.stringify(data), signatureBuffer);\n\n    return result;\n  } catch (err) {\n    // 抛出错误信息\n    console.error(err);\n    return false;\n  }\n};\n","import { getHash } from \"../../packages/fs/util.js\";\nimport { verifyData } from \"../../packages/crypto/crypto-verify.js\";\nimport { authenticatedUsers } from \"../client.js\";\n\nexport const auth = async (\n  parsedMessage,\n  client,\n  { serverOptions, serverVersion }\n) => {\n  // 验证用户身份\n  const result = await verifyData(parsedMessage.authedData);\n  const { data } = parsedMessage.authedData;\n  const { publicKey, time: accountCreationTime } =\n    parsedMessage.authedData.data;\n\n  // 验证签名\n  if (!result) {\n    console.log(\"身份验证失败：签名无效\");\n    client.closeConnection();\n    return;\n  }\n\n  // 验证会话标识符\n  if (data.markid !== client.sessionId) {\n    console.log(\"身份验证失败：会话标识符不匹配\");\n    client.closeConnection();\n    return;\n  }\n\n  client.userInfo = data;\n  client.authedData = parsedMessage.authedData;\n\n  // 验证成功，清除超时计时器\n  clearTimeout(client._authenticationTimer);\n\n  // 生成用户ID并存储用户信息\n  const userId = await getHash(publicKey);\n  client._userId = userId;\n\n  // 判断用户是否已认证\n  if (authenticatedUsers.has(userId)) {\n    // 已存在就删除旧的\n    const old = authenticatedUsers.get(userId);\n    old.client.closeConnection();\n  }\n\n  authenticatedUsers.set(userId, {\n    client,\n    publicKey,\n    authedTime: Date.now(),\n  });\n\n  // 发送服务器信息\n  client.sendMessage({\n    type: \"update-server-info\",\n    data: {\n      serverName: serverOptions.name,\n      serverVersion,\n    },\n  });\n\n  // 发送认证成功响应\n  return {\n    type: \"authed\",\n  };\n};\n","// 获取所有用户信息，管理员专用\nimport { activeConnections, authenticatedUsers } from \"../client.js\";\n\nconst mapAuthenticatedUser = ([userid, e]) => ({\n  sessionId: e.client.sessionId,\n  userInfo: e.client.userInfo,\n  userId: e.client._userId,\n  __inviteCode: e.client.__inviteCode,\n});\n\nconst mapUnauthenticatedUser = (client) => ({\n  sessionId: client.sessionId,\n});\n\nexport default {\n  admin: true,\n  handler: async () => {\n    const authenticateds =\n      Array.from(authenticatedUsers).map(mapAuthenticatedUser);\n    const unauthenticateds = Array.from(activeConnections)\n      .filter((e) => !e._userId)\n      .map(mapUnauthenticatedUser);\n\n    return {\n      unauthenticateds,\n      authenticateds,\n    };\n  },\n};\n","import { authenticatedUsers } from \"../client.js\";\n\nexport default {\n  handler: async (requestBody, client) => {\n    const { friendId } = requestBody;\n    const friendData = authenticatedUsers.get(friendId);\n\n    if (!friendData) {\n      throw new Error(\"用户不在线\");\n    }\n\n    return {\n      authedTime: friendData.authedTime,\n      // 返回数据让用户验证\n      authedData: friendData.client.authedData,\n    };\n  },\n};\n","import { authenticatedUsers } from \"../client.js\";\n\n// 存储代理数据的Map\nexport const agentTaskPool = new Map();\n\n// 默认超时时间（毫秒）\nconst DEFAULT_TIMEOUT = 5000;\n\nexport default {\n  handler: async (requestBody, client) => {\n    const {\n      friendId: targetUserId,\n      data,\n      timeout = DEFAULT_TIMEOUT,\n    } = requestBody;\n\n    if (!targetUserId) {\n      throw new Error(\"缺少 friendId\");\n    }\n\n    if (!data) {\n      throw new Error(\"没有要转发的数据\");\n    }\n\n    // 生成唯一的代理任务ID\n    const agentTaskId = `agent_${Date.now()}_${Math.random()\n      .toString(36)\n      .slice(2)}`;\n\n    // 检查目标用户是否存在且在线\n    const targetUser = authenticatedUsers.get(targetUserId);\n    if (!targetUser) {\n      throw new Error(`目标用户(${targetUserId})不在线`);\n    }\n\n    try {\n      // 转发数据到目标用户\n      targetUser.client.sendMessage({\n        type: \"agent-data\",\n        fromUserId: client._userId,\n        agentTaskId,\n        data,\n      });\n\n      const agentResponse = await Promise.race([\n        new Promise((resolve, reject) => {\n          const taskPromiseHandlers = { resolve, reject };\n          agentTaskPool.set(agentTaskId, taskPromiseHandlers);\n        }),\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error(\"转发数据超时\")), timeout)\n        ),\n      ]);\n\n      return {\n        code: 200,\n        success: true,\n        msg: \"数据已成功转发\",\n        result: agentResponse,\n      };\n    } catch (error) {\n      throw error;\n    } finally {\n      agentTaskPool.delete(agentTaskId);\n    }\n  },\n};\n","import { agentTaskPool } from \"./agent-data.js\";\n\nexport default {\n  handler: async (requestBody, client) => {\n    const { agentTaskId } = requestBody;\n\n    if (!agentTaskId) {\n      throw new Error(\"缺少agentTaskId参数\");\n    }\n\n    const taskPromiseHandlers = agentTaskPool.get(agentTaskId);\n    if (!taskPromiseHandlers) {\n      throw new Error(`未找到对应的转发任务: ${agentTaskId}`);\n    }\n\n    try {\n      taskPromiseHandlers.resolve({\n        confirmedBy: client._userId,\n        confirmedAt: Date.now()\n      });\n      return { success: true };\n    } catch (error) {\n      throw new Error(`确认转发失败: ${error.message}`);\n    }\n  },\n};\n","// 邀请码对应的用户\nconst invites = new Map();\n\nexport default {\n  handler: async (requestBody, client) => {\n    if (requestBody.setInviteCode) {\n      if (client.__inviteCode && invites.get(client.__inviteCode) === client) {\n        // 已经设置过邀请码，删除旧的\n        invites.delete(client.__inviteCode);\n      }\n\n      const inviteCode = requestBody.setInviteCode;\n\n      if (invites.get(inviteCode)) {\n        throw new Error(\"邀请码已被使用: \" + inviteCode);\n      }\n\n      const code = (client.__inviteCode = inviteCode);\n\n      invites.set(code, client);\n\n      // 监听删除\n      client._webSocket.on(\"close\", () => {\n        if (invites.get(code) === client) {\n          invites.delete(code);\n        }\n      });\n\n      return {\n        setInviteCode: true,\n        id: client._userId,\n      };\n    }\n\n    if (requestBody.setInviteCode === 0) {\n      // 清空邀请码\n      if (client.__inviteCode && invites.get(client.__inviteCode) === client) {\n        // 已经设置过邀请码，删除旧的\n        invites.delete(client.__inviteCode);\n        client.__inviteCode = undefined;\n      }\n    }\n\n    if (requestBody.findInviteCode) {\n      const inviteCode = requestBody.findInviteCode;\n      const inviteClient = invites.get(inviteCode);\n      if (!inviteClient) {\n        throw new Error(\"邀请码不存在\");\n      }\n      return {\n        findInviteCode: true,\n        id: inviteClient._userId,\n        authedData: inviteClient.authedData,\n      };\n    }\n\n    // client.__inviteCode = requestBody.inviteCode;\n\n    return null;\n  },\n};\n","export const createResponse = (taskId, success, data) => ({\n  type: \"post-response\",\n  taskId,\n  success,\n  data,\n});\n\nexport const errorResponse = (taskId, message) => \n  createResponse(taskId, 0, { msg: message });\n\nexport const successResponse = (taskId, data) =>\n  createResponse(taskId, 1, data);","import * as postHandlers from \"../post-handlers/index.js\";\nimport { errorResponse, successResponse } from \"../utils/response.js\";\n\nexport const post = async (\n  { taskId, data },\n  client,\n  { serverOptions, ...otherOptions }\n) => {\n  const { type } = data;\n  const realType = toCamelCase(type);\n\n  const handler = postHandlers[realType];\n  if (!handler) {\n    return errorResponse(taskId, \"未知的post请求类型\");\n  }\n\n  const { handler: handlerFn, admin } = handler;\n \n  if (admin && !(await checkAdminPermission(client, serverOptions))) {\n    return errorResponse(\n      taskId,\n      serverOptions?.admin ? \"您不是管理员\" : \"未配置管理员\"\n    );\n  }\n\n  try {\n    const respData = await handlerFn(data, client, {\n      serverOptions,\n      ...otherOptions,\n    });\n    return successResponse(taskId, respData);\n  } catch (error) {\n    console.error(`Handler ${realType} error:`, error);\n    return errorResponse(taskId, error.message || \"处理请求时发生错误\");\n  }\n};\n\nconst checkAdminPermission = async (client, serverOptions) => {\n  if (!serverOptions?.admin) return false;\n  return serverOptions.admin.includes(client._userId);\n};\n\nfunction toCamelCase(str) {\n  return str.replace(/-(\\w)/g, (_, letter) => letter.toUpperCase());\n}\n","import * as handlers from \"./handlers/index.js\";\n\n// 全局连接管理\nexport const activeConnections = new Set(); // 存储所有活动的WebSocket连接\nexport const authenticatedUsers = new Map(); // 存储已认证用户的信息\n\n// 读取当前 packagejson 的文件信息\nimport { readFile } from \"node:fs/promises\";\nconst packageJson = JSON.parse(\n  await readFile(new URL(\"./package.json\", import.meta.url))\n);\n\nconst serverVersion = packageJson.version;\n\nexport class ServerHandClient {\n  constructor(webSocket, { serverOptions } = {}) {\n    this._webSocket = webSocket; // WebSocket连接\n    this._userId = null; // 用户ID\n    this._serverName = serverOptions.name || \"unknown server\"; // 服务器名称\n    this.userInfo = {}; // 存储用户信息\n    this.authedData = null; // 验证用的数据\n\n    // 生成唯一的会话标识符\n    this.sessionId = Math.random().toString(36).slice(2);\n\n    // 设置认证超时处理（5秒内必须完成认证）\n    this._authenticationTimer = setTimeout(() => {\n      this._webSocket.close();\n    }, 5000);\n\n    activeConnections.add(this);\n\n    // 发送初始化消息，包含会话标识符\n    this.sendMessage({\n      type: \"init\",\n      mark: this.sessionId,\n    });\n\n    // 处理接收到的消息\n    webSocket.on(\"message\", async (message) => {\n      console.log(\"接收到客户端消息:\", message.toString());\n\n      let parsedMessage;\n      try {\n        parsedMessage = JSON.parse(message.toString());\n      } catch (error) {\n        console.log(\"消息格式错误：非JSON格式\");\n        return;\n      }\n\n      if (handlers[parsedMessage.type]) {\n        try {\n          const redata = await handlers[parsedMessage.type](\n            parsedMessage,\n            this,\n            { serverOptions, serverVersion }\n          );\n\n          // 发送认证成功响应\n          this.sendMessage(redata);\n        } catch (error) {\n          // 处理错误并发送错误响应给客户端\n          console.error(\"处理消息时发生错误:\", error);\n          this.sendMessage({\n            type: \"error\",\n            error: error.message || \"处理请求时发生错误\",\n          });\n        }\n        return;\n      }\n\n      if (parsedMessage.type === \"ping\") {\n        this.sendMessage({\n          type: \"pong\",\n        });\n        return;\n      }\n\n      // 没有找到对应的消息处理函数\n      console.error(\"未找到对应的消息处理函数\", parsedMessage);\n    });\n\n    // 处理连接关闭\n    webSocket.on(\"close\", () => {\n      this.cleanup();\n      console.log(\"客户端连接已关闭\");\n    });\n\n    // 处理错误\n    webSocket.on(\"error\", (error) => {\n      this.cleanup();\n      console.log(\"WebSocket错误:\", error);\n    });\n  }\n\n  // 发送消息到客户端\n  sendMessage(data) {\n    this._webSocket.send(JSON.stringify(data));\n  }\n\n  // 关闭连接\n  closeConnection() {\n    this._webSocket.close();\n  }\n\n  // 清理连接资源\n  cleanup() {\n    activeConnections.delete(this);\n    // 确认是这个对象才进行删除，避免删除其他对象的用户信息\n    const exitedItem = authenticatedUsers.get(this._userId);\n    if (this._userId && exitedItem && exitedItem.client === this) {\n      authenticatedUsers.delete(this._userId);\n    }\n  }\n}\n","import { WebSocketServer } from \"ws\";\nimport { ServerHandClient } from \"./client.js\";\n\nexport const initServer = async (options = {}) => {\n  const wss = new WebSocketServer({ port: options.port });\n\n  wss.on(\"connection\", function connection(ws) {\n    const client = new ServerHandClient(ws, {\n      serverOptions: options,\n    });\n\n    console.log(\"新的客户端连接\", client);\n  });\n\n  console.log(\"WebSocket 服务器运行在 ws://localhost:\" + options.port + \"/\");\n\n  return wss;\n};\n"],"names":[],"mappings":"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"}