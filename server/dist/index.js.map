{"version":3,"file":"index.js","sources":["../src/ws-server.js","../src/device-client.js","../src/admin-handle.js","../../packages/crypto/crypto-ecdsa.js","../../packages/user/util/verify.js","../../packages/util/hash/main.js","../../packages/user/util/buffer-data.js","../src/client-handle.js","../src/index.js"],"sourcesContent":["// WebSocketServer.js\n// 兼容 nodejs 和 bun 环境的 WebSocket 服务器类\nexport class WebSocketServer {\n  constructor(options = {}) {\n    this.wss = null;\n\n    // 解构options对象，设置默认值\n    const { onMessage, onConnect, onClose, onError } = options;\n\n    // 验证 onMessage 是否为函数\n    if (typeof onMessage !== \"function\") {\n      throw new Error(\"onMessage 必须是一个函数\");\n    }\n\n    this.onMessage = onMessage; // 消息处理回调函数（必需）\n\n    // 验证 onConnect 是否为函数（可选）\n    if (onConnect && typeof onConnect !== \"function\") {\n      throw new Error(\"onConnect 必须是一个函数\");\n    }\n\n    this.onConnect = onConnect; // 连接处理回调函数（可选）\n\n    // 验证 onClose 是否为函数（可选）\n    if (onClose && typeof onClose !== \"function\") {\n      throw new Error(\"onClose 必须是一个函数\");\n    }\n\n    this.onClose = onClose; // 连接关闭处理回调函数（可选）\n\n    // 验证 onError 是否为函数（可选）\n    if (onError && typeof onError !== \"function\") {\n      throw new Error(\"onError 必须是一个函数\");\n    }\n\n    this.onError = onError; // 错误处理回调函数（可选）\n  }\n\n  /**\n   * 启动WebSocket服务器\n   * @param {number} port - 服务器监听端口\n   */\n  start(port = 8080) {\n    if (typeof Bun !== \"undefined\") {\n      this._startBunServer(port);\n    } else {\n      this._startNodeServer(port);\n    }\n  }\n\n  /**\n   * 在Bun环境下启动WebSocket服务器\n   * @param {number} port - 服务器监听端口\n   */\n  _startBunServer(port) {\n    console.log(\"使用Bun原生WebSocket服务器\");\n\n    // 创建WebSocket处理器\n    const websocketHandler = {\n      open: (ws) => {\n        console.log(\"新的客户端连接\");\n\n        // 如果提供了连接处理回调函数，则调用它\n        if (this.onConnect) {\n          this.onConnect(ws);\n        }\n      },\n\n      message: (ws, data) => {\n        try {\n          // 检查是否为二进制数据\n          if (\n            data instanceof ArrayBuffer ||\n            data instanceof Uint8Array ||\n            data instanceof Buffer ||\n            (typeof data !== \"string\" && !(data instanceof String))\n          ) {\n            // 对于二进制数据或非字符串数据，直接传递给 onMessage 处理函数\n            this.onMessage(ws, data);\n\n            return;\n          }\n\n          // 解析客户端发送的JSON数据\n          const message = JSON.parse(data);\n\n          // 调用消息处理回调函数（现在是必需的）\n          this.onMessage(ws, message);\n        } catch (error) {\n          console.error(\"处理消息时出错:\", error);\n          ws.send(\n            JSON.stringify({\n              type: \"error\",\n              message: \"消息格式错误\",\n            })\n          );\n        }\n      },\n\n      close: (ws, code, message) => {\n        console.log(\"客户端断开连接:\", code, message);\n\n        // 如果提供了连接关闭处理回调函数，则调用它\n        if (this.onClose) {\n          this.onClose(ws, code, message);\n        }\n      },\n\n      error: (ws, error) => {\n        console.error(\"WebSocket错误:\", error);\n\n        // 如果提供了错误处理回调函数，则调用它\n        if (this.onError) {\n          this.onError(ws, error);\n        }\n      },\n    };\n\n    // 使用Bun.serve创建HTTP服务器并处理WebSocket连接\n    this.server = Bun.serve({\n      port: port,\n      fetch: (req, server) => {\n        // 升级到WebSocket连接\n        if (server.upgrade(req)) {\n          return; // 不返回响应，因为连接已升级为WebSocket\n        }\n\n        // 对于非WebSocket请求，返回404\n        return new Response(\"无法找到该页面\", { status: 404 });\n      },\n\n      websocket: websocketHandler,\n    });\n\n    console.log(`Bun WebSocket服务器启动，监听端口 ${port}`);\n  }\n\n  /**\n   * 在Node.js环境下启动WebSocket服务器\n   * @param {number} port - 服务器监听端口\n   */\n  async _startNodeServer(port) {\n    console.log(\"使用Node.js ws库\");\n\n    try {\n      const { WebSocketServer } = await import(\"ws\");\n\n      // 创建WebSocket服务器，监听在指定端口\n      this.wss = new WebSocketServer({ port: port });\n\n      console.log(`WebSocket服务器启动，监听端口 ${port}`);\n\n      // 处理连接事件\n      this.wss.on(\"connection\", (ws, req) => {\n        console.log(\"新的客户端连接\");\n\n        // 如果提供了连接处理回调函数，则调用它\n        if (this.onConnect) {\n          this.onConnect(ws);\n        }\n\n        // 监听客户端消息\n        ws.on(\"message\", (data, isBinary) => {\n          console.log(\"收到客户端消息:\", data.toString());\n\n          try {\n            // 检查是否为二进制数据\n            if (isBinary) {\n              // 对于二进制数据，直接传递给 onMessage 处理函数\n              this.onMessage(ws, data);\n              return;\n            }\n\n            // 解析客户端发送的JSON数据\n            const message = JSON.parse(data.toString());\n\n            // 调用消息处理回调函数（现在是必需的）\n            this.onMessage(ws, message);\n          } catch (error) {\n            console.error(\"处理消息时出错:\", error);\n            ws.send(\n              JSON.stringify({\n                type: \"error\",\n                message: \"消息格式错误\",\n              })\n            );\n          }\n        });\n\n        // 监听连接关闭事件\n        ws.on(\"close\", (code, reason) => {\n          console.log(\"客户端断开连接\");\n\n          // 如果提供了连接关闭处理回调函数，则调用它\n          if (this.onClose) {\n            this.onClose(ws, code, reason);\n          }\n        });\n\n        // 监听错误事件\n        ws.on(\"error\", (err) => {\n          console.error(\"WebSocket错误:\", err);\n\n          // 如果提供了错误处理回调函数，则调用它\n          if (this.onError) {\n            this.onError(ws, err);\n          }\n        });\n      });\n    } catch (error) {\n      console.error(\"无法加载ws库:\", error);\n    }\n  }\n\n  /**\n   * 停止WebSocket服务器\n   */\n  stop() {\n    if (typeof Bun !== \"undefined\" && this.server) {\n      this.server.stop();\n      console.log(\"Bun WebSocket服务器已停止\");\n    } else if (this.wss) {\n      this.wss.close();\n      console.log(\"Node.js WebSocket服务器已停止\");\n    }\n  }\n}\n","export class DeviceClient {\n  constructor(ws, server) {\n    if (ws._client) {\n      throw new Error(\"客户端已经初始化过:\" + ws._client.cid);\n    }\n\n    this.state = \"unauth\"; // 未认证：unauth；认证完成：authed\n    this.userId = null; // 认证完成后设置用户ID\n    this.publicKey = null; // 认证完成后设置用户公钥\n    this.userInfo = null; // 认证完成后设置用户信息\n    this.userSessionId = null; // 认证完成后设置用户会话ID\n    this.delay = 0; // 延迟时间\n\n    let cid = Math.random().toString(36).slice(2, 8);\n\n    // 检查CID是否已存在\n    while (server.clients.has(cid)) {\n      cid = Math.random().toString(36).slice(2, 8);\n    }\n\n    this.cid = cid;\n    this.ws = ws;\n    this.server = server;\n    this.connectTime = new Date(); // 记录连接时间\n  }\n\n  sendServerInfo() {\n    this.send({\n      type: \"server_info\",\n      serverName: this.server.serverName,\n      serverVersion: this.server.serverVersion,\n      cid: this.cid,\n    });\n  }\n\n  send(data) {\n    // 判断是二进制则直接发送，对象则发送字符串\n    if (\n      data instanceof ArrayBuffer ||\n      data instanceof Uint8Array ||\n      data instanceof Buffer ||\n      typeof data === \"string\"\n    ) {\n      this.ws.send(data);\n    } else {\n      try {\n        this.ws.send(JSON.stringify(data));\n      } catch (error) {\n        debugger;\n        console.error(\"发送数据失败:\", error);\n      }\n    }\n  }\n\n  close() {\n    this.ws.close();\n  }\n\n  toJSON() {\n    return {\n      cid: this.cid,\n      userId: this.userId,\n      userInfo: this.userInfo,\n      userSessionId: this.userSessionId,\n      connectTime: this.connectTime.toISOString(),\n    };\n  }\n}\n","// 和服务端的交互，使用下划线驼峰命名法\nconst options = {\n  // 获取所有连接的客户端信息\n  get_connections({ client, clients, message }) {\n    let connectionsInfo = [];\n    for (const client2 of clients.values()) {\n      connectionsInfo.push({\n        id: client2.cid,\n        userId: client2.userId,\n        userInfo: client2.userInfo,\n        connectTime: client2.connectTime,\n        state: client2.state,\n        username: client2.userInfo.name,\n        delay: client2.delay,\n      });\n    }\n    client.send({\n      type: \"connections_info\",\n      clients: connectionsInfo,\n    });\n  },\n  // 断开指定客户端的连接\n  disconnect_client({ client, clients, message }) {\n    if (message.clientId) {\n      // 找到任意一个客户端实例来调用 disconnectClient 方法\n      const targetClient = clients.get(message.clientId);\n      let result = false;\n      if (targetClient) {\n        result = targetClient.close();\n\n        client.send({\n          type: \"success\",\n          message: `已断开客户端 ${message.clientId} 的连接`,\n        });\n      } else {\n        client.send({\n          type: \"error\",\n          message: `未找到客户端 ${message.clientId}`,\n        });\n      }\n    } else {\n      client.send({\n        type: \"error\",\n        message: \"缺少客户端ID参数\",\n      });\n    }\n  },\n};\n\nexport default options;\n","/**\n * ECDSA 签名相关工具函数\n */\n\n/**\n * 生成 ECDSA 密钥对\n * @returns {Promise<{publicKey: string, privateKey: string}>} 包含公钥和私钥的 base64 字符串\n */\nexport async function generateKeyPair() {\n  try {\n    // 使用 Web Crypto API 生成 ECDSA 密钥对\n    const keyPair = await crypto.subtle.generateKey(\n      {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\", // 使用 P-256 曲线\n      },\n      true, // 可导出\n      [\"sign\", \"verify\"] // 用途\n    );\n\n    // 导出公钥（格式为 spki）\n    const publicKey = await crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\n\n    // 导出私钥（格式为 pkcs8）\n    const privateKey = await crypto.subtle.exportKey(\n      \"pkcs8\",\n      keyPair.privateKey\n    );\n\n    // 将密钥转换为 base64 字符串\n    const publicKeyBase64 = btoa(\n      String.fromCharCode(...new Uint8Array(publicKey))\n    );\n    const privateKeyBase64 = btoa(\n      String.fromCharCode(...new Uint8Array(privateKey))\n    );\n\n    return {\n      publicKey: publicKeyBase64,\n      privateKey: privateKeyBase64,\n    };\n  } catch (error) {\n    console.error(\"密钥对生成失败:\", error);\n    throw error;\n  }\n}\n\n/**\n * 导入私钥\n * @param {string} privateKeyBase64 - base64 编码的私钥\n * @returns {Promise<CryptoKey>} CryptoKey 对象\n */\nexport async function importPrivateKey(privateKeyBase64) {\n  try {\n    // 将 base64 转回二进制格式\n    const binaryKey = Uint8Array.from(atob(privateKeyBase64), (c) =>\n      c.charCodeAt(0)\n    );\n\n    // 导入私钥\n    const privateKey = await crypto.subtle.importKey(\n      \"pkcs8\",\n      binaryKey,\n      {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n      },\n      true,\n      [\"sign\"]\n    );\n\n    return privateKey;\n  } catch (error) {\n    console.error(\"私钥导入失败:\", error);\n    throw error;\n  }\n}\n\n/**\n * 导入公钥\n * @param {string} publicKeyBase64 - base64 编码的公钥\n * @returns {Promise<CryptoKey>} CryptoKey 对象\n */\nexport async function importPublicKey(publicKeyBase64) {\n  try {\n    // 将 base64 转回二进制格式\n    const binaryKey = Uint8Array.from(atob(publicKeyBase64), (c) =>\n      c.charCodeAt(0)\n    );\n\n    // 导入公钥\n    const publicKey = await crypto.subtle.importKey(\n      \"spki\",\n      binaryKey,\n      {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n      },\n      true,\n      [\"verify\"]\n    );\n\n    return publicKey;\n  } catch (error) {\n    console.error(\"公钥导入失败:\", error);\n    throw error;\n  }\n}\n\n/**\n * 创建签名函数\n * @param {string} privateKeyBase64 - base64 编码的私钥\n * @returns {Promise<Function>} 签名函数\n */\nexport const createSigner = async (privateKeyBase64) => {\n  try {\n    const privateKey = await importPrivateKey(privateKeyBase64);\n\n    return (message) => {\n      const encoder = new TextEncoder();\n      // 将消息转换为 Uint8Array\n      const data = encoder.encode(message);\n\n      // 使用私钥对数据进行签名\n      return crypto.subtle.sign(\n        {\n          name: \"ECDSA\",\n          hash: { name: \"SHA-256\" },\n        },\n        privateKey,\n        data\n      );\n    };\n  } catch (error) {\n    console.error(\"创建签名函数失败:\", error);\n    throw error;\n  }\n};\n\n/**\n * 创建验证函数\n * @param {string} publicKeyBase64 - base64 编码的公钥\n * @returns {Promise<Function>} 验证函数\n */\nexport const createVerifier = async (publicKeyBase64) => {\n  try {\n    const publicKey = await importPublicKey(publicKeyBase64);\n    return (message, signature) => {\n      const encoder = new TextEncoder();\n      // 将消息转换为 Uint8Array\n      const data = encoder.encode(message);\n      // 使用公钥验证签名\n      return crypto.subtle.verify(\n        {\n          name: \"ECDSA\",\n          hash: { name: \"SHA-256\" },\n        },\n        publicKey,\n        signature,\n        data\n      );\n    };\n  } catch (error) {\n    console.error(\"创建验证函数失败:\", error);\n    throw error;\n  }\n};","import { createVerifier } from \"../../crypto/crypto-ecdsa.js\";\n\nexport const verify = async (signedData) => {\n  const { signature, ...data } = signedData;\n  const msg = JSON.stringify(data);\n\n  const { publicKey } = data;\n\n  // 生成验证器\n  const verify = await createVerifier(publicKey);\n\n  try {\n    // 将 base64 转换回原始格式并验证签名\n    const signatureBuffer = new Uint8Array(\n      [...atob(signature)].map((c) => c.charCodeAt(0))\n    ).buffer;\n\n    const result = await verify(msg, signatureBuffer);\n\n    return result;\n  } catch (err) {\n    // 抛出错误信息\n    console.error(err);\n    return false;\n  }\n};\n","/**\n * @file util.js\n * @author yao\n * 传入一个数据，计算哈希值\n * @param {ArrayBuffer|Blob|String} data 数据\n * @return {Promise<string>} 哈希值\n */\nexport const getHash = async (data) => {\n  if (!globalThis.crypto) {\n    // Node.js 环境\n    const crypto = await import(\"crypto\");\n    if (typeof data === \"string\") {\n      data = new TextEncoder().encode(data);\n    } else if (data instanceof Blob) {\n      data = await data.arrayBuffer();\n    }\n    const hash = crypto.createHash(\"sha256\");\n    hash.update(Buffer.from(data));\n    return hash.digest(\"hex\");\n  } else {\n    // 浏览器环境\n    if (typeof data === \"string\") {\n      data = new TextEncoder().encode(data);\n    } else if (data instanceof Blob) {\n      data = await data.arrayBuffer();\n    }\n    const hash = await crypto.subtle.digest(\"SHA-256\", data);\n    const hashArray = Array.from(new Uint8Array(hash));\n    const hashHex = hashArray\n      .map((bytes) => bytes.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n    return hashHex;\n  }\n};\n/**\n * 计算文件的分块哈希值\n * @param {File|ArrayBuffer|String} file - 要计算哈希的文件对象、ArrayBuffer或字符串\n * @returns {Promise<string[]>} 返回包含所有分块哈希值的数组\n * @description 将文件分割成128KB大小的块，并计算每个块的SHA-256哈希值\n */\nexport const calculateFileChunkHashes = async (\n  file,\n  { callback, chunkSize } = {}\n) => {\n  const CHUNK_SIZE = chunkSize || 128 * 1024; // 128kb\n  // 获取文件的 ArrayBuffer\n  const getBuffer = async (file) => {\n    if (file instanceof Blob) {\n      return file.arrayBuffer();\n    }\n\n    if (file instanceof ArrayBuffer) {\n      return file;\n    }\n\n    if (typeof file === \"string\") {\n      // 如果是字符串，转换为ArrayBuffer\n      return new TextEncoder().encode(file).buffer;\n    }\n\n    // 添加对Nodejs Buffer的支持\n    if (typeof Buffer !== \"undefined\" && file instanceof Buffer) {\n      return file.buffer;\n    }\n\n    console.error(\"不支持的文件类型: \", typeof file, file);\n    throw new Error(\"不支持的文件类型: \");\n  };\n\n  // 处理文件分块并计算哈希\n  const buffer = await getBuffer(file);\n  const hashPromises = [];\n\n  // TODO: 这里应该分批发送代码块\n  for (let i = 0; i < buffer.byteLength; i += CHUNK_SIZE) {\n    const chunk = buffer.slice(i, i + CHUNK_SIZE);\n    const hash = await getHash(chunk);\n    if (callback) {\n      callback({\n        chunk,\n        chunkHash: hash,\n        chunkIndex: i,\n      });\n    }\n    hashPromises.push(hash);\n  }\n\n  return Promise.all(hashPromises);\n};\n\n/**\n * 获取文件的总体哈希值\n * @param {File} file - 要计算哈希的文件对象\n * @returns {Promise<string>} 返回文件的总体哈希值\n * @description 将文件分割成128kb大小的块，计算每个块的SHA-256哈希值，\n *             然后将所有块的哈希值拼接成字符串，最后计算这个字符串的哈希值作为文件的总体哈希值\n */\nexport const getFileHash = async (file) =>\n  getHash(\n    (await calculateFileChunkHashes(file, { chunkSize: 128 * 1024 })).join(\"\")\n  );\n","/**\n * 将数据和对象信息组装成一个buffer对象\n * 格式：[prefixLength][prefixBuffer][originBuffer]\n * @param {Uint8Array} originBuffer - 原始二进制数据\n * @param {Object} info - 要附加的对象信息\n * @returns {Uint8Array} 组装后的buffer对象\n * @throws {Error} 当参数类型不正确时抛出错误\n */\nexport const toBuffer = (originBuffer, info) => {\n  // 参数类型检查\n  if (!(originBuffer instanceof Uint8Array)) {\n    throw new Error(\"originBuffer must be a Uint8Array\");\n  }\n\n  // 将对象信息转换为JSON字符串并编码为Uint8Array\n  const infoJson = JSON.stringify(info);\n  const infoBuffer = new TextEncoder().encode(infoJson);\n\n  // 检查长度是否超出限制（255字节）\n  if (infoBuffer.length > 255) {\n    throw new Error(\"Info data is too large, must be less than 255 bytes\");\n  }\n\n  // 第一个字节存储infoBuffer的长度\n  const prefixLength = infoBuffer.length;\n\n  // 创建组合buffer：prefixLength + infoBuffer + originBuffer\n  const combinedBuffer = new Uint8Array(1 + prefixLength + originBuffer.length);\n\n  // 设置各部分数据\n  combinedBuffer[0] = prefixLength;\n  combinedBuffer.set(infoBuffer, 1);\n  combinedBuffer.set(originBuffer, 1 + prefixLength);\n\n  return combinedBuffer;\n};\n\n/**\n * 从buffer对象中解析出原始数据和附加信息\n * @param {Uint8Array} buffer - 包含数据和信息的buffer对象\n * @returns {Object} 包含data和info属性的对象\n * @throws {Error} 当buffer格式不正确或数据损坏时抛出错误\n */\nexport const toData = (buffer) => {\n  // 参数检查\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(\"buffer must be a Uint8Array\");\n  }\n\n  if (buffer.length < 1) {\n    throw new Error(\"buffer is too short\");\n  }\n\n  // 读取infoBuffer的长度\n  const prefixLength = buffer[0];\n\n  // 边界检查\n  if (1 + prefixLength > buffer.length) {\n    throw new Error(\"buffer is corrupted or format is incorrect\");\n  }\n\n  // 提取infoBuffer和originBuffer\n  const infoBuffer = buffer.slice(1, 1 + prefixLength);\n  const originBuffer = buffer.slice(1 + prefixLength);\n\n  // 解码infoBuffer为对象\n  try {\n    const infoJson = new TextDecoder().decode(infoBuffer);\n    const info = JSON.parse(infoJson);\n\n    return {\n      data: originBuffer,\n      info: info,\n    };\n  } catch (error) {\n    throw new Error(\"Failed to parse info data: \" + error.message);\n  }\n};\n","import { verify } from \"../../packages/user/util/verify.js\";\nimport { getHash } from \"../../packages/util/hash/main.js\";\nimport { toBuffer } from \"../../packages/user/util/buffer-data.js\";\n\nexport const options = {\n  // 认证用户信息\n  async authentication({ client, clients, users, message }) {\n    try {\n      const data = message.signedData;\n\n      if (data.cid !== client.cid) {\n        throw new Error(\"cid 不匹配\");\n      }\n\n      // 验证签名并获取数据\n      const result = await verify(data);\n      if (!result) {\n        throw new Error(\"签名被篡改\");\n      }\n\n      // 匹配成功后，填入信息\n      client.userInfo = data.info;\n      client.userId = await getHash(data.publicKey);\n      client.publicKey = data.publicKey;\n      client.state = \"authed\";\n      client.userSessionId = data.userSessionId;\n\n      // 清除认证定时器\n      clearTimeout(client._authTimer);\n\n      // 添加到用户映射对象\n      let userPool = users.get(client.userId);\n      if (!userPool) {\n        userPool = new Set();\n        users.set(client.userId, userPool);\n      }\n\n      userPool.add(client);\n\n      // 认证成功后，发送确认消息\n      client.send({\n        type: \"auth_success\",\n        userInfo: client.userInfo,\n        userId: client.userId,\n        message: \"认证成功\",\n      });\n\n      client.sendServerInfo();\n    } catch (err) {\n      console.error(err);\n      // 发送认证失败消息\n      client.send({\n        type: \"error\",\n        kind: \"authentication\",\n        message: err.message,\n      });\n\n      setTimeout(() => {\n        client.close();\n      }, 100);\n      return;\n    }\n  },\n  // 检查用户是否在线\n  async find_user({ client, clients, users, message }) {\n    const { userId } = message;\n    let userPool = users.get(userId);\n    userPool = userPool ? Array.from(userPool) : [];\n\n    client.send({\n      type: \"response_find_user\",\n      userId,\n      publicKey: userPool.length > 0 ? userPool[0].publicKey : null, // 目标用户的publicKey\n      tabs: userPool,\n      isOnline: userPool && userPool.length > 0,\n    });\n  },\n\n  // 转发用户数据\n  async agent_data({ client, clients, users, message, binaryData }) {\n    const { options, data } = message;\n    const { userId, userSessionId, ...otherData } = options;\n\n    if (userId) {\n      const targetUserClients = users.get(userId);\n      if (!targetUserClients) return;\n\n      const sendData = binaryData\n        ? toBuffer(binaryData, {\n            ...otherData,\n            type: \"agent_data\",\n            fromUserId: client.userId,\n            fromUserSessionId: client.userSessionId,\n          })\n        : {\n            ...otherData,\n            type: \"agent_data\",\n            data,\n            fromUserId: client.userId,\n            fromUserSessionId: client.userSessionId,\n          };\n\n      let targetDeviceClient = null;\n\n      if (userSessionId) {\n        targetDeviceClient = Array.from(targetUserClients).find(\n          (client) => client.userSessionId === userSessionId\n        );\n      }\n\n      if (!targetDeviceClient) {\n        targetDeviceClient = targetUserClients.values().next().value;\n      }\n\n      // 发送给目标客户\n      if (targetDeviceClient) {\n        targetDeviceClient.send(sendData);\n      }\n    }\n  },\n  // 更新延迟时间\n  async update_delay({ client, clients, users, message }) {\n    const { delay } = message;\n    client.delay = delay;\n  },\n};\n\nexport default options;\n","#!/usr/bin/env node\n\n// index.js - WebSocket服务器入口文件\nimport { WebSocketServer } from \"./ws-server.js\";\nimport { DeviceClient } from \"./device-client.js\";\nimport adminHandle from \"./admin-handle.js\";\nimport clientHandle from \"./client-handle.js\";\nimport { createRequire } from \"node:module\";\nimport { toData } from \"../../packages/user/util/buffer-data.js\";\n\nconst require = createRequire(import.meta.url);\n\nconst packageJson = require(\"../package.json\");\n\nexport const initServer = async ({\n  password,\n  port = 8081,\n  serverName = \"handserver\",\n}) => {\n  let server;\n  const clients = new Map(); // 用户cid索引数据\n  const users = new Map(); // 用户userId索引数据\n\n  // 定义连接处理函数\n  function onConnect(ws) {\n    const client = new DeviceClient(ws, server); // 传递 clients Map 给 DeviceClient\n    ws._client = client;\n    clients.set(client.cid, client);\n    console.log(\"新客户端已连接: \", client.cid);\n\n    client._authTimer = setTimeout(() => {\n      client.close();\n    }, 1000 * 3); // 3秒未认证则关闭连接\n\n    client.send({\n      type: \"need_auth\",\n      cid: client.cid,\n      time: new Date().toISOString(),\n    });\n\n    // 发送服务端的数据给对方\n    // 兼容操作 旧版本客户端\n    client.send({\n      type: \"update-server-info\",\n      data: {\n        serverName,\n        serverVersion: packageJson.version,\n      },\n    });\n  }\n\n  // 定义连接关闭处理函数\n  function onClose(ws, code, reason) {\n    // TODO: 同步应该记录下关闭连接的客户端信息\n    // 从Map中移除断开连接的客户端\n    clients.delete(ws._client.cid);\n    if (ws._client.userId) {\n      const userPool = users.get(ws._client.userId);\n      if (userPool) {\n        userPool.delete(ws._client);\n      }\n    }\n  }\n\n  // 定义错误处理函数\n  function onError(ws, error) {\n    // TODO: 应该记录下错误信息\n    if (ws._client) {\n      clients.delete(ws._client.cid);\n      if (ws._client.userId) {\n        const userPool = users.get(ws._client.userId);\n        if (userPool) {\n          userPool.delete(ws._client);\n        }\n      }\n    }\n  }\n\n  // 定义消息处理函数\n  function onMessage(ws, message) {\n    const client = ws._client;\n\n    // 二进制数据\n    let binaryData = null;\n\n    if (message instanceof Buffer) {\n      const { data, info } = toData(message);\n      binaryData = data;\n      message = info;\n    }\n\n    if (clientHandle[message.type]) {\n      clientHandle[message.type]({\n        client,\n        clients,\n        users,\n        message,\n        binaryData,\n      });\n      return;\n    }\n\n    switch (message.type) {\n      case \"ping\":\n        // 处理客户端的ping消息，返回pong响应\n        client.send({\n          type: \"pong\",\n          timestamp: new Date().toISOString(),\n        });\n        break;\n\n      case \"echo\":\n        // 回显消息\n        client.send({\n          type: \"echo\",\n          message: message.message,\n          timestamp: new Date().toISOString(),\n        });\n        break;\n\n      case \"get_connections\":\n      case \"disconnect_client\":\n        // 验证密码，通过才允许获取所有连接的客户端信息\n        if (message.password !== password) {\n          client.send({\n            type: \"error\",\n            message: \"密码错误\",\n          });\n          break;\n        }\n\n        // 调用 adminHandle 中的方法处理消息\n        adminHandle[message.type]({ client, clients, message });\n        break;\n\n      default:\n        client.send({\n          type: \"error\",\n          message: \"未知的消息类型\",\n          response: message,\n        });\n    }\n  }\n\n  // 创建WebSocket服务器实例，使用option对象传入处理函数\n  server = new WebSocketServer({\n    onMessage,\n    onConnect,\n    onClose,\n    onError,\n  });\n\n  // 将 clients Map 添加到 server 实例上，以便 DeviceClient 可以访问\n  server.clients = clients;\n  server.users = users;\n  server.serverName = serverName;\n  server.serverVersion = packageJson.version;\n\n  // 启动服务器，监听指定端口\n  server.start(port);\n\n  return server;\n};\n"],"names":["options","clientHandle","adminHandle"],"mappings":"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"}